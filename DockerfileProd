# Multi-stage production Dockerfile with security best practices
# use nodejs 20 alpine as base image
FROM node:20-alpine AS  builder

# install pnpm globally
RUN npm install -g pnpm

# set working directory
WORKDIR /app

# copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# install dependencies
RUN pnpm install --frozen-lockfile 

# copy the rest of the application code
COPY . .

# build the application
RUN pnpm run build

# production stage
FROM node:20-alpine AS production

# install pnpm globally and curl for healthcheck
RUN npm install -g pnpm && \
    apk add --no-cache curl

# Create a non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# set working directory
WORKDIR /app

# copy package files 
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# install production dependencies
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# create applogs directly for logging and set ownership
RUN mkdir -p /app/applogs && \
    chown -R nestjs:nestjs /app

# switch to the non-root user
USER nestjs

# expose the port the app runs on
EXPOSE 8000

# healthcheck to ensure the app is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/ || exit 1

# start the application
CMD ["node","dist/main.js"]